using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace C_TestForge.Models.TestCases
{
    /// <summary>
    /// Represents an input variable in a test case
    /// </summary>
    public class TestCaseVariableInput : TestCaseVariableBase
    {
        /// <summary>
        /// Value of the input variable
        /// </summary>
        public string Value { get; set; } = string.Empty;

        /// <summary>
        /// Array values (if IsArray is true)
        /// </summary>
        public List<string> ArrayValues { get; set; } = new List<string>();

        /// <summary>
        /// Whether the input value is generated by a solver
        /// </summary>
        public bool IsGeneratedValue { get; set; }

        /// <summary>
        /// Source of the generated value (e.g., solver query ID)
        /// </summary>
        public string GenerationSource { get; set; } = string.Empty;

        /// <summary>
        /// Whether the input is a stub parameter
        /// </summary>
        public bool IsStubParameter { get; set; }

        /// <summary>
        /// Create a clone of the input variable
        /// </summary>
        public TestCaseVariableInput Clone()
        {
            return new TestCaseVariableInput
            {
                Id = Id,
                Name = Name,
                Type = Type,
                Value = Value,
                IsArray = IsArray,
                ArraySize = ArraySize,
                ArrayValues = ArrayValues != null ? new List<string>(ArrayValues) : new List<string>(),
                IsPointer = IsPointer,
                IsByReference = IsByReference,
                Constraints = Constraints?.Select(c => c.Clone()).ToList() ?? new List<VariableConstraint>(),
                IsGeneratedValue = IsGeneratedValue,
                GenerationSource = GenerationSource,
                IsStubParameter = IsStubParameter
            };
        }

        /// <summary>
        /// Get a string representation of the input variable
        /// </summary>
        public override string ToString()
        {
            string baseStr = base.ToString();
            return $"{baseStr} = {Value}";
        }
    }
}
